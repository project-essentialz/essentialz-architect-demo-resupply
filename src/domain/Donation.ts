import {Eventful} from "./Eventful";
import {Charity} from "./Charity";
import {Driver} from "./Driver";
import {Donor} from "./Donor";
import {DonationItemPhoto} from "./DonationItemPhoto";
import {pricing} from "../utility/pricing";

export enum DonationStatus {
    submitted = 'submitted',
    service_request_dispatched = 'service_request_dispatched',
    driver_assigned = 'driver_assigned',
    driver_en_route = 'driver_en_route',
    driver_arrived = 'driver_arrived',
    quote_sent = 'quote_sent',
    payment_successful = 'payment_successful',
    primary_drop = 'primary_drop',
    completed = 'completed'
}

export enum DonationItemType {
    largeItem = 'largeItem',
    smallItem = 'smallItem',
    bag = 'bag',
    box = 'boxes',
    appliance = 'appliance',
    hazardousItem = 'hazardousItem'

}

class DonationSpec {
    largeItems: number = 0
    smallItems: number = 0
    bags: number = 0
    boxes: number = 0
    appliances: number = 0
    hazardous: number = 0

    aboveTheGroundFloor: boolean = false // Todo: Do we need this at all?
    staircases: number = 0
    disassembly: number = 0

    additionalInformation: string = ''
}

class DonationItem {
    type?: DonationItemType
    photos: DonationItemPhoto[] = []
}

class DropOffOutcome {
    acceptedItems: DonationItem[] = []
    pocName?: string
    pocPhone?: string
    pocConfirmed?: boolean
}

export class Donation extends Eventful {
    id?: string
    donationCode?: string;
    donationStatus?: DonationStatus

    /**
     * Donation Request Fields
     */

    date?: string               // Specified by the donor
    formattedDate?: string      // Autogenerated based on date entry
    partOfDay: string = 'am'    // Specified by the donor
    spec: DonationSpec          // Specified by the donor

    adjustedSpec: DonationSpec  // Donation specification adjusted by the driver

    timeSlot?: string           // Service request time slot assigned by the scheduler

    content?: DonationItem[]    // DonationItemType driven donation content
    donor: Donor                // Donor information

    charity?: Charity           // Charity that Donor picked
    primaryDropOff?: Charity    // Same as charity field unless overwritten by the scheduler
    secondaryDropOff?: Charity  // Inferred from the primaryDropOff unless overwritten by the scheduler

    driver?: Driver             // Driver that is assigned to the pickup

    primaryDropOffOutcome?: DropOffOutcome      // What items were accepted at the first charity
    secondaryDropOffOutcome?: DropOffOutcome    // What items were accepted at the second charity

    constructor() {
        super();
        this.donor = new Donor();
        this.spec = new DonationSpec()
        this.adjustedSpec = new DonationSpec()
    }

    /**
     * getEstimate(spec: {@link DonationSpec})
     *
     * Calculate the value of the donation pickup estimate based
     * on the specification provided.
     *
     * @public
     * @param spec
     * @returns number
     */

    getEstimate(spec: DonationSpec): number {
        const price = pricing.base
            + pricing.largeItems * (spec.largeItems || 0)
            + pricing.smallItems * (spec.smallItems || 0)
            + pricing.boxes * (spec.boxes || 0)
            + pricing.bags * (spec.bags || 0)
            + pricing.appliances * (spec.appliances || 0)
            + pricing.hazardous * (spec.hazardous || 0)
            + pricing.staircases * (spec.staircases || 0)
            + pricing.disassembly * (spec.disassembly || 0)
        return Math.round(price * 100) / 100
    }

}